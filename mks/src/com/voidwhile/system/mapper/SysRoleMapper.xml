<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.voidwhile.system.mapper.SysRoleMapper" >
	
	<resultMap id="RoleMenuResultMap" type="SysRoleVo">
		<id column="uid" property="uid" />
	    <result column="supplier_id" property="supplierId" />
	    <result column="role_code" property="roleCode" />
	    <result column="role_name" property="roleName" />
	    <result column="data_range" property="dataRange" />
	    <result column="is_system" property="isSystem" />
	    <result column="create_time" property="createTime" />
	    <result column="update_time" property="updateTime" />
	    <result column="is_applogin" property="isAppLogin" />
	    <result column="level" property="level" />
	    
		<collection property="menuList" column="uid" javaType="ArrayList" ofType="SysMenus" 
			select="com.voidwhie.system.mapper.SysMenusMapper.findMenusByRoleId" />
	</resultMap>
	
	<!-- 查询字段 -->
  	<sql id="baseColumnList" >
    	uid, supplier_id, role_code, role_name, data_range, is_system, create_time, update_time, is_applogin, level
  	</sql>
  	
  	<!-- Where 条件 -->
  	<sql id="whereClause" >
  		<where>
			<trim prefixOverrides="and">
				<if test="supplierId != null">
					and supplier_id=#{supplierId}
				</if>
				<if test="roleCode != null">
					and role_code=#{roleCode}
				</if>
				<if test="roleName != null">
					and role_name=#{roleName}
				</if>
				<if test="isSystem != null">
					and is_system=#{isSystem}
				</if>
			</trim>
		</where>
  	</sql>
  	<!-- 按主键查询角色 -->
  	<select id="getById" resultType="SysRole" parameterType="java.lang.String" >
    	select 
    		<include refid="baseColumnList" />
    	from sys_role
    	where uid = #{uid}
  	</select>
  	
  	<!-- 根据角色ID查询角色权限信息 -->
  	<select id="getPermissionsByRoleid" resultMap="RoleMenuResultMap" parameterType="java.lang.String">
		select 
    		<include refid="baseColumnList" />
    	from sys_role
    	where uid = #{uid}
	</select>
	<!-- 根据UserId查询角色权限信息 -->
	<select id="getUserPermissionsByUserId" resultMap="RoleMenuResultMap" parameterType="java.lang.String">
  		SELECT m.* 
		from sys_role m, sys_user_role rm 
		where m.uid=rm.role_id and rm.user_id=#{userId}
  	</select>
  	
  	<!-- 按Map查询角色 -->
  	<select id="findByMap" resultType="SysRole" parameterType="java.util.Map" >
    	select
    		<include refid="baseColumnList" />
    	from sys_role
    		<include refid="whereClause" />
    	<if test="orderByClause != null" >
			order by ${orderByClause}
		</if>
		<if test="offset != null and pageSize != null">
			limit #{offset} , #{pageSize}
		</if>
 	</select>
  
  	<!-- 统计角色数量 -->
  	<select id="countByMap" resultType="java.lang.Integer" parameterType="java.util.Map" >
    	select count(*) from sys_role
      		<include refid="whereClause" />
  	</select>
  
  	<!-- 插入语句 -->
  	<insert id="insert" parameterType="SysRole" useGeneratedKeys="true" keyProperty="uid" >
  		insert into sys_role (
  			uid, supplier_id, role_code, role_name, data_range, is_system, update_time, create_time ,is_applogin , level
      	) values (
      		#{uid}, #{supplierId}, #{roleCode}, #{roleName}, #{dataRange}, #{isSystem}, #{updateTime}, now(), #{isAppLogin},#{level}
      	)
  	</insert>
  	
  	<!-- 插入角色菜单语句 -->
  	<insert id="insertPermissions">
  		insert into sys_role_menu (role_id, menu_id) values (#{param1}, #{param2})
  	</insert>
  	
  	 <!-- 删除角色菜单语句 -->
  	<delete id="deletePermissions">
  		delete from sys_role_menu where role_id=#{roleId}
  	</delete>
  	
     <!-- 插入角色用户语句 -->
  	<insert id="insertRoleUser">
  		insert into sys_user_role(user_id, role_id) values (#{userId}, #{roleId})
  	</insert>
  		
   <!-- 删除删除用户角色 -->
  	<delete id="deleteRoleUser">
    	delete from sys_user_role where role_id=#{roleId} and user_id=#{userId}
  	</delete>
  
  	<!-- 按主键更新角色 -->
  	<update id="updateById" parameterType="SysRole" >
	    update sys_role
	    set role_name = #{roleName},
      		data_range = #{dataRange},
      		is_applogin = #{isAppLogin},
      		level = #{level},
      		
      		update_time = #{updateTime}
	    where uid = #{uid}
  	</update>
  
  	<!-- 按主键删除角色 -->  
  	<delete id="deleteById" parameterType="java.lang.String" >
    	delete from sys_role where uid = #{uid}
  	</delete>
  	
  	<!-- 删除指定角色的权限 -->
  	<delete id="deletePermissionsById" parameterType="java.lang.String" >
    	delete from sys_role_menu where role_id=#{roleId}
  	</delete>
  	<!-- 删除指定角色的用户 -->
  	<delete id="deleteUserById" parameterType="java.lang.String" >
    	delete from sys_user_role where role_id=#{roleId}
  	</delete>
  	
  	<!-- 关联查询 获取用户的角色列表 -->
  	<select id="getRoleByUserId" resultType="SysRole" parameterType="java.lang.String">
  		SELECT m.* 
		from sys_role m, sys_user_role rm 
		where m.uid=rm.role_id and rm.user_id=#{userId}
  	</select>
  	<!-- 企业内部角色的菜单权限 -->
  	<select id="getMenuByRoleId" resultMap="RoleMenuResultMap" parameterType="java.util.Map">
  		SELECT DISTINCT m.uid,m.menu_name as role_name,m.menu_url as role_code,status as is_system,m.create_time as create_time,m.parent_code as attr1,m.menu_code as attr2
		from sys_menus m LEFT JOIN sys_role_menu rm on m.uid=rm.menu_id
		where rm.role_id in (select uid from sys_role where uid in  
		<foreach collection="uids" item="listItem" open="(" close=")" separator="," >
              #{listItem}
        </foreach>
		)
		<if test="orderByClause != null" >
			order by m.${orderByClause}
		</if>
		<if test="offset != null and pageSize != null">
			limit #{offset} , #{pageSize}
		</if>
  	</select>
  	<!-- 企业内部角色的菜单权限数量 -->
  	<select id="getMenuCountByRoleId" resultMap="RoleMenuResultMap">
  		SELECT DISTINCT m.uid,m.menu_name as role_name,m.menu_url as role_code,status as is_system,m.create_time as create_time
		from sys_menus m LEFT JOIN sys_role_menu rm on m.uid=rm.menu_id
		where rm.role_id in (select uid from sys_role where uid in  
		<foreach collection="list" item="listItem" open="(" close=")" separator="," >
              #{listItem}
        </foreach>
		)
  	</select>
  	
  	<!-- 企业内部角色的用户 -->
  	<select id="getUserByRoleId" resultMap="RoleMenuResultMap" parameterType="java.util.Map">
  		SELECT DISTINCT u.uid,u.user_name as role_code,u.real_name as attr1,u.gender as attr2,u.phone as attr3,u.qq as attr4,u.tel as attr5,u.birthday as update_time,u.create_time
		from sys_user u,sys_user_role ur WHERE u.uid=ur.user_id and u.is_system="0"
		and ur.role_id in (select uid from sys_role where uid in
		<foreach collection="uids" item="listItem" open="(" close=")" separator="," >
              #{listItem}
        </foreach>
		)
		<if test="orderByClause != null" >
			order by u.${orderByClause}
		</if>
		<if test="offset != null and pageSize != null">
			limit #{offset} , #{pageSize}
		</if>
  	</select>
  	
  	<!-- 企业内部角色的用户数量 -->
  	<select id="getUserCountByRoleId" resultMap="RoleMenuResultMap">
  		SELECT DISTINCT u.uid,u.real_name as attr1,u.gender as attr2,u.phone as attr3,u.qq as attr4,u.tel as attr5,u.birthday as update_time,u.create_time
		from sys_user u,sys_user_role ur WHERE u.uid=ur.user_id
		and ur.role_id in (select uid from sys_role where uid in
		<foreach collection="list" item="listItem" open="(" close=")" separator="," >
              #{listItem}
        </foreach>
		)
  	</select>
  	
  	<!--根据角度编码获取用户  -->
  	<select id="findByRoleId" resultType="SysRole" parameterType="java.util.Map">
  		SELECT b.user_id as attr4,b.role_id as attr5 FROM sys_role a LEFT JOIN sys_user_role b ON a.uid = b.role_id 
  		<include refid="whereClause" />
  	
  	</select>
</mapper>